//Hammerhead
var H = (function(hammer) {

    var canvas;
    var canvasWidth = window.innerWidth;
    var canvasHeight = window.innerHeight;
    var centerX = canvasWidth / 2;
    var centerY = canvasHeight / 2;

    var aTime = 0;
    var cOut;

    var lightOn = false;

    var delta;
    var enemiesLeft = 13;
    var playerFireTime = 0;

    var running = true;
    var showEndMessage = false;
    var endMessage = "";
    var endMessageTime = 0;

	window.onresize = function() {
		
	    canvasWidth = window.innerWidth;
	    canvasHeight = window.innerHeight;
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
		
		centerX = canvasWidth / 2;
		centerY = canvasHeight / 2;

        if (onMenu) {

            showMenu();
        }
		
	}

    var context;
	
	var debug = false;
    

function vectorUncompress(vString) {

    lines = vString.split('@');

    array = [];

    for (var i = 0; i < lines.length - 1; i++) {
        
        var type = "";
        var cCode = "";
        var id = "";

        var parts = lines[i].split(';');

        type = parts[0];
        cCode = parts[1];

        var cArray = [];
        for (x = 2; x < parts.length - 1; x += 2) {
            cArray.push([parts[x], parts[x+1]]);
        }

        id = parts[parts.length - 1];
        array.push([parseInt(type, 10), parseInt(cCode, 10), cArray, id]); 
    }
};

    var colours = 

['#7b686a', '#736262', '#756365', '#6c5b5c', '#605052', '#544747', '#695959', '#6c5c5b', '#584a49', '#483d3c', '#716064', '#7c686c', '#796669', '#746264', '#6a595a', '#5f677b', '#555d70', '#000000', '#030303', '#565e76', '#040404', '#32374d', '#685859', '#353b55', '#51586e', '#504651', '#615360', '#5f504d', '#131314', '#ff0000', '#73615e', '#776561', '#766460', '#6f5d5a', '#695855', '#73615d', '#74635f', '#61514e', '#2c3146', '#4b4049', '#372f36', '#554851', '#463b43', '#444b59', '#6b5a5b', '#383037', '#3a3138', '#715f5e', '#75625f', '#776461', '#58638e', '#333952', '#474e60', '#5a6278', '#5c6579', '#5a6276', '#5a4f5b', '#8a7875', '#0a0a0c', '#151515', '#4b424d', '#4a3f45', '#493e48', '#4f4340', '#3d343a', '#42383f', '#3c333b', '#554952', '#473c44', '#453b44', '#463c45', '#443a43', '#3b323a', '#5b6477', '#756360', '#525a71', '#495062', '#535b6d', '#2e3348', '#010101', '#515b82', '#554845', '#50444d', '#584a52', '#5a4c54', '#443a42', '#2d3248', '#404043', '#3f3f42', '#7e7e7f', '#4c4c4e', '#39393b', '#3a3a3c', '#258335', '#363638', 'none', '#3d3d42', '#323336', '#313134', '#2e2e31', '#202024', '#303033', '#2c2c2e', '#1e1e20', '#242424', '#2f2f30', '#323234', '#268d41', '#235e2b', '#2ca24b', '#227c39', '#1d6730', '#1c632e', '#368f4a', '#29913f', '#33aa4a', '#2fa844', '#34b74a', '#38b04d', '#2ea243', '#29933d', '#258236', '#237b32', '#258234', '#369d46', '#52c565', '#49bf5a', '#2b953a', '#1c6326', '#195925', '#1f702f', '#1f6f2b', '#278a36', '#278c36', '#373738', '#3c3c3d', '#383838', '#2ea43f', '#37373a', '#8295cb', '#51639d', '#425187', '#4f619a', '#8b0000', '#1f1c14', '#18160f', '#594b52', '#6e5c61', '#67575d', '#4a3f46', '#54474d', '#5e4f54', '#6a595d', '#726063', '#786566', '#625461', '#3d343c', '#675653', '#564846', '#30364d', '#4a5479', '#443938', '#69595d', '#68575c', '#67575c', '#676f8d', '#545c78', '#766360', '#786563', '#766365', '#715f62', '#5f525e', '#4c577d', '#3d4563', '#525976', '#050505', '#505873', '#121212', '#0a0b0d', '#121213', '#3e353a'];



    var temp = [
/////////


[[0,"#ff0000",[462,273],[-259,-134],"BBox"],
[1,0,[[236,131],[236,131],[264,131],[264,131],[264,130],[264,-136],[264,-136],[235,-137],],
""],
[1,1,[[236,131],[203,109],[203,53],[236,64],],
""],
[1,2,[[236,64],[203,53],[203,-59],[235,-70],],
""],
[1,3,[[235,-70],[203,-59],[203,-115],[235,-137],],
""],
[1,4,[[204,-59],[193,-55],[193,-108],[203,-115],],
""],
[1,5,[[193,-55],[175,-49],[175,-96],[192,-108],],
""],
[1,6,[[203,53],[192,49],[193,-55],[204,-59],],
""],
[1,7,[[193,49],[203,53],[203,109],[193,102],],
""],
[1,8,[[193,102],[176,90],[175,44],[193,49],],
""],
[1,9,[[175,44],[193,50],[193,-55],[175,-50],],
""],
[1,10,[[149,11],[150,11],[150,-18],[148,-18],],
""],
[1,11,[[149,11],[148,-18],[131,-18],[127,11],],
""],
[1,12,[[127,11],[131,-17],[114,-18],[111,11],],
""],
[1,13,[[111,11],[115,-18],[-102,-18],[-102,11],],
""],
[1,14,[[150,74],[131,92],[126,74],],
""],
[1,3,[[131,92],[126,74],[114,98],],
""],
[1,6,[[114,98],[-104,133],[-1,74],[3,75],[126,74],],
""],
[1,15,[[175,77],[147,77],[150,74],[126,74],[3,75],[3,60],[176,61],],
""],
[1,16,[[3,60],[3,60],[3,75],[3,75],[3,75],[-136,44],[-136,44],[-137,34],],
""],
[1,17,[[-15,68],[-15,68],[-14,65],[-14,65],[-14,63],[-17,63],[-17,64],[-19,64],[-19,64],[-20,64],[-20,64],[-20,64],[-20,63],[-20,63],[-21,62],[-22,62],[-22,63],[-23,67],[-20,67],[-20,66],[-20,65],[-19,66],[-17,66],[-17,68],],
""],
[1,17,[[-23,66],[-23,66],[-23,65],[-23,65],[-26,61],[-27,61],[-31,64],[-31,65],[-29,65],[-29,65],[-29,64],[-29,64],[-28,64],[-27,64],[-27,64],[-27,65],[-25,65],[-24,67],],
""],
[1,16,[[-26,64],[-26,64],[-27,64],[-27,63],[-27,63],[-26,62],[-26,62],],
""],
[1,17,[[-31,65],[-31,65],[-31,60],[-31,60],[-31,59],[-33,59],[-35,60],[-35,61],[-37,58],[-38,58],[-39,58],[-40,61],[-39,63],[-37,63],[-37,61],[-35,62],[-33,62],[-33,64],[-32,65],],
""],
[1,17,[[-41,63],[-41,63],[-40,61],[-40,61],[-40,59],[-41,57],[-41,57],[-43,58],[-44,58],[-45,58],[-47,56],[-48,56],[-49,58],[-49,61],[-47,61],[-46,59],[-44,60],[-43,60],[-42,63],],
""],
[1,17,[[-51,59],[-51,59],[-51,58],[-51,58],[-55,58],[-55,57],[-54,57],[-51,57],[-51,56],[-54,56],[-54,56],[-55,56],[-54,55],[-53,55],[-51,56],[-49,56],[-49,59],[-50,60],[-55,60],[-55,58],[-52,59],[-52,59],],
""],
[1,17,[[-56,60],[-56,59],[-55,57],[-55,57],[-55,55],[-56,54],[-60,54],[-61,55],[-61,56],[-60,56],[-61,57],[-62,57],[-62,58],[-62,58],[-60,59],[-60,58],[-60,58],[-59,58],[-59,58],[-58,57],[-58,59],],
""],
[1,16,[[-57,56],[-57,56],[-57,55],[-57,55],[-58,55],[-58,56],],
""],
[1,17,[[-65,56],[-67,56],[-68,55],[-68,56],[-69,57],[-70,57],[-70,54],[-70,52],[-68,52],[-68,54],[-67,54],[-65,54],[-64,53],[-64,52],[-63,53],[-62,53],[-62,55],[-63,58],[-65,58],],
""],
[1,17,[[-72,56],[-71,51],[-74,51],[-76,50],[-76,51],[-73,52],[-73,52],[-73,53],[-74,53],[-76,52],[-76,53],[-74,53],[-73,54],[-74,55],[-75,54],[-77,54],[-77,55],],
""],
[1,17,[[-77,55],[-77,53],[-77,53],[-79,49],[-81,49],[-85,52],[-85,53],[-80,53],],
""],
[1,16,[[-80,52],[-81,52],[-80,51],[-80,51],],
""],
[1,18,[[-85,53],[-85,53],[-85,48],[-85,48],[-89,47],[-91,47],[-93,48],[-93,50],[-90,52],],
""],
[1,16,[[-87,51],[-89,51],[-91,50],[-90,49],[-89,49],[-87,50],[-87,51],],
""],
[1,19,[[3,60],[3,11],[150,11],[150,-18],[3,-18],[3,-66],[175,-67],[175,61],],
""],
[1,20,[[145,39],[145,40],[142,40],[140,43],[140,46],[141,48],[143,49],[146,50],[153,50],[153,31],[150,30],[147,30],[144,31],[142,33],[141,35],[142,38],[144,39],],
""],
[1,19,[[151,47],[151,41],[145,41],[143,42],[143,46],[145,47],],
""],
[1,19,[[150,39],[147,39],[145,37],[145,34],[146,33],[151,33],],
""],
[1,20,[[137,50],[134,50],[134,41],[127,41],[127,38],[134,38],[134,33],[127,33],[127,30],[137,30],],
""],
[1,20,[[125,49],[125,45],[121,47],[118,47],[117,46],[117,43],[124,38],[125,37],[125,33],[122,31],[120,30],[117,30],[114,31],[114,34],[116,33],[121,33],[122,34],[122,36],[115,41],[114,43],[114,47],[116,49],[118,50],[122,50],],
""],
[1,20,[[112,45],[112,42],[105,42],[105,45],],
""],
[1,20,[[98,49],[95,49],[95,30],[98,30],],
""],
[1,20,[[87,49],[87,46],[85,47],[82,47],[80,46],[80,43],[82,41],[84,41],[84,38],[82,38],[81,37],[81,34],[82,33],[86,33],[87,33],[87,31],[85,30],[81,30],[79,32],[78,33],[78,38],[80,39],[80,40],[78,41],[77,42],[77,46],[78,47],[80,50],[83,50],],
""],
[1,21,[[175,-67],[175,-83],[149,-83],[150,-80],[3,-81],[3,-66],],
""],
[1,22,[[151,-80],[127,-80],[131,-98],[149,-83],],
""],
[1,6,[[127,-80],[131,-98],[112,-105],[-104,-140],[-1,-80],[3,-81],],
""],
[1,23,[[3,-66],[3,-81],[-1,-81],[-137,-49],[-136,-40],],
""],
[1,24,[[3,-18],[3,-66],[-137,-40],[-137,34],[3,60],[3,11],[-102,11],[-102,-18],],
""],
[1,6,[[-137,8],[-147,8],[-147,-15],[-137,-15],],
""],
[1,25,[[-147,8],[-147,9],[-147,9],[-148,8],[-148,-14],[-147,-15],[-147,-15],],
""],
[1,26,[[-147,9],[-148,8],[-168,8],[-168,9],],
""],
[1,27,[[-147,-15],[-148,-14],[-168,-14],[-168,-15],],
""],
[1,6,[[-148,8],[-148,-14],[-168,-14],[-168,8],],
""],
[1,6,[[-147,9],[-147,53],[-170,53],[-170,50],[-168,50],[-168,17],[-170,17],[-170,13],[-168,13],[-168,9],],
""],
[1,6,[[-147,-15],[-168,-15],[-168,-19],[-170,-19],[-170,-22],[-168,-22],[-168,-56],[-171,-56],[-170,-59],[-147,-59],],
""],
[1,28,[[-168,-22],[-197,-22],[-197,-56],[-168,-56],],
""],
[1,28,[[-168,13],[-168,-19],[-197,-19],[-197,13],],
""],
[1,28,[[-168,50],[-168,17],[-197,17],[-197,50],],
""],
[1,29,[[-198,-56],[-234,-60],[-225,-50],[-258,-53],[-234,-44],[-276,-34],[-236,-34],[-254,-18],[-216,-27],[-218,-15],[-197,-23],],
"flame"],
[1,29,[[-198,-19],[-234,-24],[-224,-13],[-257,-16],[-233,-7],[-276,3],[-236,3],[-254,19],[-216,9],[-218,22],[-197,13],],
"flame"],
[1,29,[[-198,17],[-234,13],[-224,23],[-257,20],[-233,29],[-276,39],[-236,39],[-253,55],[-216,45],[-218,58],[-197,49],],
"flame"],



/////////

[0,"#ff0000",[462,273],[-259,-140],"BBox"],
   [0, 30,[155,26],[-63,-12],"GUN"],
],

/////////




[[1,30,[[259,82],[226,79],[226,115],[259,130],[288,122],[288,-71],[259,-62],],
""],
[1,31,[[259,-62],[226,-47],[226,-2],[259,-15],],
""],
[1,32,[[259,-15],[226,-2],[226,79],[258,82],],
""],
[1,33,[[226,79],[215,76],[215,109],[226,115],],
""],
[1,34,[[215,109],[197,101],[198,67],[215,76],],
""],
[1,35,[[226,-2],[215,1],[215,76],[226,79],],
""],
[1,36,[[226,-2],[215,1],[215,-41],[226,-47],],
""],
[1,34,[[214,1],[198,1],[198,-33],[215,-41],],
""],
[1,37,[[215,1],[215,76],[198,67],[198,0],],
""],
[1,38,[[197,-49],[198,-32],[170,-32],[170,-49],],
""],
[1,39,[[198,-33],[197,-67],[258,-96],[259,-62],],
""],
[1,40,[[288,-71],[288,-88],[258,-96],[259,-62],],
""],
[1,41,[[172,-28],[161,-36],[152,-42],[135,-45],[131,-68],[147,-64],[170,-52],[172,-50],[170,-49],[170,-32],],
""],
[1,42,[[135,-45],[131,-67],[-87,-92],[-87,-71],],
""],
[1,35,[[172,-28],[172,-28],[161,-36],[161,-36],[152,-42],[135,-45],[-87,-71],[18,-29],],
""],
[1,43,[[197,83],[197,83],[197,80],[197,80],[29,83],[28,84],[172,83],[172,84],],
""],
[1,35,[[172,84],[172,83],[28,84],[21,84],[18,83],[-87,126],[135,100],[152,96],[168,87],],
""],
[1,44,[[171,45],[170,47],[170,26],[171,24],[171,24],],
""],
[1,45,[[171,24],[162,31],[152,38],[147,25],],
""],
[1,46,[[152,38],[136,41],[146,25],[148,25],],
""],
[1,47,[[152,38],[148,60],[170,47],[170,25],],
""],
[1,48,[[136,41],[152,38],[148,60],[132,64],],
""],
[1,40,[[136,41],[146,25],[17,28],[-74,68],[-85,73],],
""],
[1,49,[[136,41],[131,64],[-85,95],[-85,73],],
""],
[1,50,[[-18,-43],[-20,-44],[-120,-27],[-120,-25],],
""],
[1,51,[[-18,-43],[18,-29],[20,-29],[20,-28],[-120,-8],[-120,-25],],
""],
[1,52,[[20,-28],[20,-29],[22,-29],[22,-7],[-120,7],[-120,7],[-120,-8],[-119,-8],[-119,-8],[20,-28],[20,-28],],
""],
[1,53,[[198,-13],[198,-32],[170,-32],[172,-28],[22,-28],[22,-7],],
""],
[1,54,[[197,-12],[198,67],[197,80],[28,83],[28,84],[22,84],[22,79],[132,64],[148,60],[170,47],[171,45],[171,24],[145,25],[22,28],[22,-7],],
""],
[1,17,[[175,73],[175,60],[167,60],[163,62],[163,65],[164,66],[166,66],[166,66],[164,67],[162,69],[162,71],[164,73],],
""],
[1,54,[[172,71],[172,68],[166,68],[164,69],[164,70],[166,71],],
""],
[1,54,[[172,65],[170,66],[167,65],[166,64],[166,63],[167,62],[168,62],[172,62],],
""],
[1,17,[[158,73],[159,61],[148,60],[148,62],[155,62],[155,66],[148,66],[148,68],[155,68],[156,74],],
""],
[1,17,[[146,71],[146,73],[143,74],[137,74],[135,72],[135,70],[136,69],[143,64],[143,63],[143,63],[141,62],[143,61],[145,61],[146,63],[146,64],[145,65],[143,67],[139,69],[137,70],[137,72],[139,72],[143,73],[144,72],],
""],
[1,17,[[132,71],[132,69],[125,69],[125,71],],
""],
[1,17,[[119,75],[119,66],[115,67],[116,75],],
""],
[1,17,[[108,75],[108,72],[105,74],[102,74],[101,72],[101,70],[102,69],[105,69],[105,68],[99,69],[98,71],[98,72],[100,75],[102,75],],
""],
[1,55,[[23,-7],[22,28],[17,28],[-75,69],[-120,61],[-120,7],],
""],
[1,40,[[-120,18],[-131,18],[-130,-1],[-120,-1],],
""],
[1,35,[[-120,18],[-120,34],[-130,34],[-130,18],],
""],
[1,35,[[-131,17],[-151,17],[-151,-15],[-130,-15],],
""],
[1,56,[[-131,-15],[-130,-32],[-132,-28],[-132,-15],],
""],
[1,40,[[-132,-28],[-132,-15],[-151,-15],[-151,-28],],
""],
[1,57,[[-132,-28],[-130,-32],[-130,-33],[-151,-33],[-151,-28],],
""],
[1,58,[[-151,-8],[-151,-28],[-151,-33],[-151,-38],[-182,-38],[-182,-8],],
""],
[1,59,[[-151,17],[-151,-8],[-182,-8],[-182,17],],
""],
[1,58,[[-151,18],[-151,17],[-182,17],[-182,18],],
""],
[1,59,[[-151,22],[-151,18],[-182,18],[-182,22],],
""],
[1,58,[[-151,22],[-151,47],[-182,47],[-182,21],],
""],
[1,59,[[-151,72],[-151,47],[-182,47],[-182,72],],
""],
[1,60,[[-130,65],[-132,62],[-132,49],[-130,49],],
""],
[1,61,[[-130,65],[-130,67],[-151,67],[-151,62],[-132,62],],
""],
[1,35,[[-132,62],[-132,49],[-151,49],[-151,62],],
""],
[1,40,[[-130,49],[-151,49],[-151,17],[-131,17],],
""],
[1,62,[[18,83],[8,81],[-51,90],[-87,105],[-87,126],],
""],
[1,17,[[4,82],[4,84],[4,84],[3,83],[3,82],],
""],





/////////

[0, 30,[155,26],[-63,-12],"GUN"],
],


/////////


[[1,35,[[297,113],[267,121],[267,86],[297,94],],
""],
[1,63,[[267,121],[267,86],[203,55],[203,91],],
""],
[1,64,[[233,69],[233,23],[221,20],[221,64],],
""],
[1,65,[[233,69],[233,23],[267,36],[267,86],],
""],
[1,66,[[221,20],[203,21],[203,55],[221,64],],
""],
[1,67,[[297,95],[267,86],[267,-115],[297,-106],],
""],
[1,68,[[267,36],[233,23],[233,-61],[267,-65],],
""],
[1,40,[[233,23],[222,20],[222,-58],[233,-61],],
""],
[1,69,[[222,20],[203,21],[203,-49],[222,-58],],
""],
[1,70,[[221,-93],[222,-58],[203,-49],[203,-84],],
""],
[1,71,[[233,-61],[222,-59],[221,-93],[233,-98],],
""],
[1,72,[[233,-98],[267,-115],[267,-65],[233,-61],],
""],
[1,73,[[203,72],[177,72],[177,72],[175,72],[175,72],[175,71],[175,54],[175,54],[203,55],],
""],
[1,47,[[152,88],[156,64],[174,53],[177,50],[175,54],[175,54],[176,72],[177,73],[173,76],],
""],
[1,45,[[156,64],[151,50],[177,50],[174,53],],
""],
[1,46,[[151,50],[139,68],[156,64],],
""],
[1,74,[[139,68],[134,91],[152,88],[156,64],],
""],
[1,40,[[151,50],[139,68],[-93,95],[16,51],[20,51],],
""],
[1,49,[[134,92],[139,68],[-93,95],[-93,117],],
""],
[1,75,[[21,51],[21,28],[203,34],[203,55],[175,54],[177,50],],
""],
[1,76,[[21,51],[21,28],[-127,14],[-127,29],[17,50],],
""],
[1,20,[[2,43],[2,34],[0,34],[0,37],[-4,37],[-4,33],[-5,33],[-6,37],[-6,42],[-5,42],[-5,42],[-4,43],[-4,42],[-4,42],[-4,39],[-4,39],[-3,39],[0,39],[0,43],],
""],
[1,20,[[-7,42],[-8,42],[-9,39],[-12,39],[-14,40],[-14,41],[-14,41],[-15,40],[-11,32],[-10,32],],
""],
[1,76,[[-10,37],[-11,37],[-11,36],[-11,36],[-10,36],],
""],
[1,20,[[-16,41],[-16,40],[-15,32],[-15,32],[-17,32],[-19,34],[-20,34],[-22,31],[-24,30],[-24,39],[-23,40],[-23,40],[-22,40],[-22,40],[-22,40],[-22,34],[-22,34],[-22,34],[-20,37],[-19,37],[-18,36],[-17,36],[-17,41],],
""],
[1,20,[[-26,40],[-27,40],[-27,34],[-28,34],[-29,35],[-30,36],[-31,33],[-32,33],[-32,38],[-32,38],[-34,38],[-33,29],[-32,29],[-31,30],[-29,33],[-29,33],[-27,30],[-25,30],],
""],
[1,20,[[-35,38],[-35,29],[-40,29],[-40,30],[-37,31],[-37,31],[-37,33],[-40,32],[-40,34],[-37,34],[-37,36],[-41,36],[-41,36],[-41,38],[-41,38],[-41,38],[-35,38],[-35,38],],
""],
[1,20,[[-42,37],[-41,34],[-41,29],[-42,28],[-45,28],[-47,29],[-47,32],[-46,32],[-46,33],[-47,34],[-49,37],[-47,37],[-44,34],[-43,34],[-43,37],],
""],
[1,76,[[-43,30],[-43,32],[-44,32],[-45,31],[-45,30],[-44,30],],
""],
[1,20,[[-49,37],[-51,37],[-51,33],[-55,32],[-55,35],[-55,36],[-57,35],[-56,26],[-55,26],[-54,27],[-55,28],[-55,31],[-51,31],[-51,28],[-50,28],[-48,28],],
""],
[1,20,[[-58,35],[-58,27],[-63,26],[-63,27],[-60,28],[-60,30],[-63,29],[-63,29],[-64,31],[-63,31],[-63,31],[-60,31],[-60,31],[-60,33],[-63,33],[-63,35],],
""],
[1,17,[[-64,34],[-65,34],[-66,33],[-66,32],[-67,32],[-69,32],[-71,34],[-72,34],[-72,33],[-72,33],[-68,25],[-68,25],[-68,25],[-67,25],[-67,25],[-63,33],],
""],
[1,76,[[-67,30],[-69,30],[-68,29],[-68,28],[-67,28],],
""],
[1,17,[[-73,33],[-72,25],[-73,24],[-79,24],[-80,26],[-81,27],[-81,30],[-80,31],[-78,33],[-77,33],],
""],
[1,76,[[-74,32],[-76,32],[-79,30],[-79,28],[-78,26],[-74,26],],
""],
[1,77,[[17,50],[-22,66],[-128,49],[-127,29],],
""],
[1,35,[[-127,22],[-138,22],[-138,3],[-127,3],],
""],
[1,40,[[-127,3],[-138,3],[-138,-15],[-127,-15],],
""],
[1,40,[[-138,4],[-160,4],[-160,37],[-138,37],],
""],
[1,60,[[-139,50],[-139,55],[-137,55],[-138,37],[-139,37],],
""],
[1,61,[[-139,55],[-139,55],[-139,50],[-139,50],[-160,50],[-160,55],],
""],
[1,35,[[-139,51],[-139,37],[-160,37],[-160,51],],
""],
[1,59,[[-160,61],[-160,50],[-160,29],[-192,29],[-192,60],],
""],
[1,58,[[-160,29],[-192,29],[-192,4],[-160,4],],
""],
[1,59,[[-160,2],[-160,4],[-192,4],[-192,2],],
""],
[1,58,[[-160,-1],[-160,2],[-192,2],[-192,-1],],
""],
[1,59,[[-160,-28],[-192,-29],[-192,-1],[-160,-1],],
""],
[1,58,[[-160,-28],[-192,-29],[-192,-54],[-160,-54],],
""],
[1,35,[[-138,4],[-160,3],[-160,-29],[-138,-29],],
""],
[1,56,[[-138,-30],[-138,-49],[-138,-48],[-139,-44],[-139,-29],],
""],
[1,40,[[-139,-29],[-139,-44],[-160,-44],[-160,-30],],
""],
[1,57,[[-139,-44],[-138,-49],[-160,-49],[-160,-44],],
""],
[1,78,[[21,28],[21,-8],[177,-4],[177,-26],[175,-28],[156,-40],[139,-45],[6,-64],[7,-64],[20,-66],[203,-63],[203,34],],
""],
[1,79,[[180,24],[180,9],[171,9],[169,10],[167,12],[167,13],[168,15],[170,16],[170,16],[168,16],[166,17],[166,19],[166,21],[167,22],[169,23],[173,24],],
""],
[1,78,[[177,22],[177,17],[170,17],[169,18],[169,21],[171,22],],
""],
[1,78,[[177,15],[172,15],[171,14],[171,12],[173,11],[177,11],],
""],
[1,79,[[163,24],[160,24],[160,16],[152,16],[152,14],[160,14],[160,11],[159,10],[152,10],[152,8],[163,8],],
""],
[1,79,[[150,22],[150,20],[149,20],[148,21],[146,21],[143,21],[142,20],[141,20],[141,18],[147,15],[149,13],[150,10],[148,9],[146,8],[141,8],[139,8],[139,11],[142,9],[145,9],[147,10],[147,13],[142,15],[138,17],[138,21],[140,22],[141,23],[148,23],],
""],
[1,79,[[136,19],[130,19],[130,18],[129,18],[129,17],[136,17],],
""],
[1,79,[[121,22],[118,22],[118,7],[121,7],],
""],
[1,17,[[110,19],[110,21],[110,22],[103,22],[100,19],[100,16],[101,14],[102,14],[102,13],[101,13],[100,12],[100,8],[102,7],[103,7],[109,7],[110,7],[110,9],[109,9],[109,9],[104,9],[103,9],[103,12],[104,13],[107,13],[107,15],[104,15],[103,16],[102,17],[102,18],[104,20],[105,20],[107,20],[108,20],[110,19],],
""],
[1,80,[[203,-63],[203,-66],[177,-66],[177,-65],[26,-67],],
""],
[1,40,[[177,-65],[176,-67],[156,-79],[135,-84],[-93,-110],[16,-66],[20,-67],],
""],
[1,81,[[16,-66],[7,-64],[6,-63],[-55,-73],[-93,-88],[-93,-110],],
""],
[1,82,[[139,-45],[135,-24],[152,-20],[156,-40],],
""],
[1,83,[[175,-6],[175,-28],[177,-26],[177,-4],],
""],
[1,84,[[175,-6],[152,-20],[157,-40],[175,-28],],
""],
[1,85,[[-91,-78],[-91,-55],[135,-24],[139,-45],[-56,-73],],
""],
[1,35,[[-91,-55],[135,-24],[152,-20],[175,-6],[177,-4],[15,-9],],
""],
[1,86,[[-80,-50],[-128,-43],[-128,-15],[-127,-15],[-127,14],[21,28],[21,-8],[15,-9],],
""],


/////////



[0,30,[155,26],[-63,-12],"GUN"]
],



[[1,87,[[-50,-48],[-46,-44],[4,-64],[4,-70],],
""],
[1,88,[[-46,-44],[-34,-32],[4,-48],[4,-64],],
""],
[1,89,[[-46,-44],[-50,-48],[-72,5],[-66,5],],
""],
[1,90,[[-46,-44],[-34,-32],[-50,5],[-66,5],],
""],
[1,91,[[-34,-32],[-29,-27],[4,-40],[4,-48],],
""],
[1,92,[[-34,-32],[-29,-27],[-42,5],[-50,5],],
""],
[1,93,[[-29,-27],[-27,-25],[4,-38],[4,-40],],
""],
[1,94,[[4,-48],[41,-32],[36,-27],[4,-40],],
""],
[1,95,[[41,-32],[53,-44],[4,-64],[4,-48],],
""],
[1,96,[[4,-70],[4,-64],[53,-44],[73,5],[79,5],[57,-48],],
""],
[1,97,[[36,-27],[53,-44],[73,5],[49,5],],
""],
[1,98,[[49,5],[57,5],[41,43],[36,37],],
""],
[1,99,[[57,5],[73,5],[53,54],[41,43],],
""],
[1,100,[[73,5],[79,5],[57,58],[53,54],],
""],
[1,101,[[41,43],[36,37],[4,51],[4,59],],
""],
[1,102,[[41,43],[53,54],[4,75],[4,58],],
""],
[1,103,[[53,54],[57,58],[4,81],[4,75],],
""],
[1,104,[[4,75],[4,81],[-50,59],[-46,54],],
""],
[1,105,[[4,75],[4,59],[-34,43],[-46,54],],
""],
[1,106,[[4,58],[4,51],[-29,37],[-34,43],],
""],
[1,107,[[4,51],[4,48],[34,36],[36,37],],
""],
[1,108,[[34,36],[27,29],[4,38],[4,48],],
""],
[1,109,[[34,36],[36,37],[49,5],[47,5],],
""],
[1,110,[[47,5],[47,5],[37,5],[37,5],[27,29],[34,36],],
""],
[1,111,[[47,5],[49,5],[36,-27],[4,-40],[4,-38],[34,-25],],
""],
[1,112,[[37,5],[47,5],[34,-25],[27,-18],],
""],
[1,113,[[27,-18],[16,-7],[21,5],[37,5],],
""],
[1,114,[[27,-18],[34,-25],[4,-38],[4,-28],],
""],
[1,115,[[4,-28],[4,-13],[16,-7],[27,-18],],
""],
[1,116,[[4,-28],[-20,-18],[-27,-25],[4,-38],],
""],
[1,117,[[4,-13],[-9,-7],[-20,-18],[4,-28],],
""],
[1,118,[[4,5],[4,-13],[-9,-7],],
""],
[1,119,[[4,-13],[4,5],[16,-7],],
""],
[1,120,[[16,-7],[4,5],[21,5],],
""],
[1,121,[[4,5],[16,18],[21,5],],
""],
[1,122,[[4,5],[4,23],[16,18],],
""],
[1,123,[[4,5],[-9,18],[4,23],],
""],
[1,124,[[4,5],[-9,18],[-14,5],],
""],
[1,125,[[4,5],[-14,5],[-9,-7],],
""],
[1,126,[[-9,-7],[-20,-18],[-29,5],[-14,5],],
""],
[1,127,[[-14,5],[-29,5],[-20,29],[-9,18],],
""],
[1,128,[[-9,18],[-20,29],[4,38],[4,23],],
""],
[1,129,[[4,23],[4,38],[27,29],[37,5],[21,5],[16,18],],
""],
[1,130,[[4,38],[4,51],[-29,37],[-20,29],],
""],
[1,131,[[-27,36],[-29,37],[-42,5],[-40,5],],
""],
[1,132,[[-27,36],[-20,29],[-30,5],[-40,5],],
""],
[1,133,[[-40,5],[-42,5],[-29,-27],[-27,-25],],
""],
[1,134,[[-34,43],[-29,37],[-42,5],[-50,5],],
""],
[1,135,[[-34,43],[-46,54],[-66,5],[-50,5],],
""],
[1,136,[[-46,54],[-50,59],[-72,5],[-66,5],],
""],
[1,137,[[-30,5],[-40,5],[-27,-25],[-20,-18],],
""],
[1,138,[[41,-32],[53,-44],[4,-64],[4,-48],],
""],
],

[[1,139,[[1476,101],[1476,-62],[1105,-223],[1106,263],],
""],
[1,140,[[1106,262],[1105,-223],[192,-223],[193,263],],
""],
[1,141,[[193,262],[32,157],[32,-117],[192,-223],],
""],
[1,140,[[32,157],[-559,157],[-561,-117],[33,-117],],
""],
[1,142,[[-559,157],[-561,-118],[-1231,-63],[-1231,102],],
""],
[1,143,[[-1231,95],[-1435,117],[-1358,64],[-1509,41],[-1509,41],[-1351,17],[-1364,13],[-1376,8],[-1493,-18],[-1493,-18],[-1356,-26],[-1485,-74],[-1319,-68],[-1385,-100],[-1231,-57],],
""],
[1,144,[[1052,262],[980,328],[318,328],[247,262],],
""],
[1,145,[[1049,-223],[980,-288],[317,-288],[249,-223],],
""],
],
            ];

    var things = [
	
	////////////////
	/////ASSETS/////
	////////////////

["player", "player", [3450, 38450], 0, temp[0], [170, 170], true],
["enemy", "enemy", [8050, 38290], 0, temp[3], [180, 180], true],
["enemy", "enemy", [8450, 34290], 0, temp[3], [180, 180], true],
["enemy", "enemy", [4550, 34090], 0, temp[3], [180, 180], true],
["enemy", "enemy", [4550, 37090], 0, temp[3], [180, 180], true],
["enemy", "enemy", [4550, 28090], 0, temp[3], [180, 180], true],
["enemy", "enemy", [6950, 25090], 0, temp[3], [180, 180], true],
["enemy", "enemy", [2950, 23090], 0, temp[3], [180, 180], true],
["enemy", "enemy", [3950, 17090], 0, temp[3], [180, 180], true],
["enemy", "enemy", [6950, 19090], 0, temp[3], [180, 180], true],
["huge", "huge", [1500, 2000], 235, temp[4], [1000, 1000], true],
["huge", "huge", [7900, 1300], 225, temp[4], [1000, 1000], true],
["huge", "huge", [7900, 5000], 265, temp[4], [1000, 1000], true],
["huge", "huge", [1900, 6000], 225, temp[4], [1000, 1000], true],
//["Door4", "event", [4800, 7600], 0, [], [1300, 800], true],
//["Door3", "event", [4000, 13000], 0, [], [2800, 800], true],
//["Door2", "event", [4000, 19290], 0, [], [2800, 800], true],
//["Door1", "event", [4000, 24400], 0, [], [2800, 800], true],
["wall1", "wall", [0, 40600], 0, [], [10800, 440], true],
["wall2", "wall", [0, 33000], 0, [], [240, 8000], true],
["wall3", "wall", [10500, 32800], 0, [], [240, 8000], true],
["wall4", "wall", [0, 32400], 0, [], [3900, 880], true],
["wall5", "wall", [6900, 32400], 0, [], [3900, 880], true],
["wall6", "wall", [2750, 28100], 0, [], [240, 4300], true],
["wall7", "wall", [7850, 28100], 0, [], [240, 4300], true],
["wall8", "wall", [0, 27300], 0, [], [3900, 880], true],
["wall9", "wall", [6900, 27300], 0, [], [3900, 880], true],
["wall10", "wall", [0, 21000], 0, [], [3900, 880], true],
["wall11", "wall", [6900, 21000], 0, [], [3900, 880], true],
["wall12", "wall", [1840, 21000], 0, [], [240, 6880], true],
["wall13", "wall", [8750, 20800], 0, [], [240, 6880], true],
["wall14", "wall", [2740, 16000], 0, [], [240, 5780], true],
["wall15", "wall", [7800, 16000], 0, [], [240, 5780], true],
["wall16", "wall", [2450, 16100], 0, [], [2370, 400], true],
["wall17", "wall", [6050, 16100], 0, [], [2370, 400], true],
["wall18", "wall", [4500, 7800], 0, [], [300, 8400], true],
["wall19", "wall", [6050, 7800], 0, [], [300, 8400], true],
["wall20", "wall", [0, 0], 0, [], [300, 8400], true],
["wall21", "wall", [10550, 0], 0, [], [300, 8400], true],
["wall22", "wall", [0, 7800], 0, [], [4500, 300], true],
["wall23", "wall", [6100, 7800], 0, [], [4500, 300], true],
["wall24", "wall", [0, 0], 0, [], [10700, 300], true]
	/////////////
	/////////////

        ];

    var listOfThings = [];



    var tilesAll = new Image();
    var tilesAll2 = new Image();
    var tilesAllReady = false;

    var tileAll = new Image();

    /*
    var level = [
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 2, 0, 2, 4, 2, 0, 2, 0, 0, 0, 4, 0, 4, 0, 0, 0, 3, 3, 3, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 4, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 4, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 4, 4, 4, 4, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 4, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 4, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 4, 4, 0, 4, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 4, 4, 4, 4, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 4, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 1, 1, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 1, 1, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 4, 0, 0, 0, 0, 0, 4, 0, 0, 0, 4, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 4, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 4, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 4, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 4, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 1, 1, 1, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 1, 1, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 1, 0, 2, 0, 2, 0, 2, 0, 2, 0, 2, 1, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 0, 2, 0, 2, 0, 2, 0, 2, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2, 2, 0, 0, 2, 2, 2, 2, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 3, 3, 3, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 2, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 3, 3, 3, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 3, 3, 3, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 4, 0, 0, 0, 0, 0, 4, 4, 4, 0, 0, 0, 0, 0, 0, 0, 0, 1],
        [1, 0, 0, 4, 4, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 4, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 4, 0, 0, 0, 0, 3, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1],
        [1, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 3, 0, 0, 0, 1],
        [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
        ];

        function compress(cArray) {

            var contents = "";
            var currentRow = null;
            var lastChar = null;
            var countChar = 0;

            for (var row = 0; row < cArray.length; row++) {

                currentRow = cArray[row];

                for (var col = 0; col < currentRow.length; col++) {
                    var currentChar = currentRow[col];

                    if (lastChar === null) {
                        lastChar = currentChar;
                    }

                    if (currentChar === lastChar) {
                        countChar++;
                    } else {
                        contents += lastChar + ":" + countChar + ",";
                        countChar = 1;
                    }

                    lastChar = currentChar;

                }

            }

            contents += lastChar + ":" + countChar + ",";
            countChar = 1;
			
            return (currentRow.length + "-" + contents.slice(0, -1));
        }
        
        console.log(compress(level));
        */

        var level = uncompress("36-1:37,0:12,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:13,1:2,0:11,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:12,1:2,3:4,0:8,2:1,0:1,2:1,0:1,2:1,4:1,2:1,0:1,2:1,0:3,4:1,0:1,4:1,0:3,3:4,1:2,0:34,1:2,0:8,4:1,0:25,1:2,3:4,0:30,1:2,0:34,1:2,0:34,1:2,3:4,0:4,4:1,0:21,3:4,1:2,0:34,1:2,0:34,1:2,3:4,0:15,4:5,0:10,1:2,0:21,4:3,0:10,1:2,0:6,4:3,0:25,1:2,3:4,0:4,4:1,0:21,3:4,1:2,0:8,4:2,0:24,1:2,0:34,1:2,3:4,0:30,1:2,0:34,1:2,0:34,1:2,0:16,4:3,0:15,1:2,0:6,3:1,0:5,3:1,0:11,3:1,0:5,3:1,0:3,1:2,0:6,3:1,0:5,3:1,0:11,3:1,0:5,3:1,0:3,1:2,0:6,3:1,0:5,3:1,0:11,3:1,0:5,3:1,0:3,1:2,0:6,3:1,0:5,3:1,0:11,3:1,0:5,3:1,0:3,1:17,2:4,1:16,9:15,1:1,0:4,1:1,9:30,1:1,0:2,4:2,1:1,9:30,1:1,0:2,4:2,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,4:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:3,4:1,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:2,4:2,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,4:2,0:1,4:1,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:30,1:1,0:4,1:1,9:24,1:7,2:4,1:7,9:18,1:1,0:16,1:1,9:18,1:1,0:16,1:1,9:18,1:1,0:5,4:1,0:10,1:1,9:18,1:1,0:3,4:1,0:12,1:1,9:18,1:1,0:13,4:1,0:2,1:1,9:18,1:1,0:1,4:1,0:12,4:1,0:1,1:1,9:18,1:1,0:1,4:1,0:14,1:1,9:18,1:1,0:1,4:1,0:11,4:1,0:2,1:1,9:18,1:1,0:1,4:1,0:7,4:4,0:3,1:1,9:18,1:1,0:1,4:1,0:14,1:1,9:18,1:1,0:16,1:1,9:18,1:1,0:6,4:4,0:6,1:1,9:18,1:1,0:16,1:1,9:18,1:1,0:16,1:1,9:18,1:1,0:16,1:1,9:18,1:4,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,1:4,9:21,1:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,1:1,9:18,1:7,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,1:7,9:12,1:1,0:21,4:1,1:1,9:12,1:1,0:21,4:1,1:1,9:12,1:1,0:22,1:1,9:12,1:1,0:19,4:3,1:1,9:12,1:1,0:16,4:1,0:5,1:1,9:12,1:1,0:2,4:1,0:19,1:1,9:12,1:1,0:2,4:1,0:19,1:1,9:12,1:1,0:2,4:1,0:15,4:1,0:3,1:1,9:12,1:1,0:2,4:1,0:19,1:1,9:12,1:1,0:22,1:1,9:12,1:1,0:8,4:2,0:11,4:1,1:1,9:12,1:1,0:9,4:1,0:12,1:1,9:12,1:1,0:9,4:1,0:7,4:1,0:4,1:1,9:12,1:1,0:22,1:1,9:12,1:1,0:15,4:1,0:6,1:1,9:12,1:1,0:22,1:1,9:12,1:1,0:22,1:1,9:12,1:1,0:22,1:1,9:12,1:7,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,1:7,9:18,1:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,1:1,9:21,1:4,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,1:4,9:18,1:1,0:16,1:1,9:18,1:1,0:16,1:1,9:18,1:1,0:2,4:1,0:13,1:1,9:18,1:1,0:2,4:1,0:11,4:1,0:1,1:1,9:18,1:1,0:1,4:2,0:4,4:2,0:7,1:1,9:18,1:1,0:1,4:2,0:5,4:1,0:3,4:1,0:3,1:1,9:18,1:1,0:1,4:2,0:4,4:2,0:3,4:1,0:3,1:1,9:18,1:1,0:1,4:1,0:5,4:2,0:3,4:1,0:3,1:1,9:18,1:1,0:1,4:1,0:4,4:3,0:3,4:1,0:3,1:1,9:18,1:1,0:12,4:2,0:2,1:1,9:18,1:1,0:12,4:1,0:3,1:1,9:18,1:1,0:16,1:1,9:18,1:1,0:16,1:1,9:18,1:1,0:16,1:1,9:18,1:4,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,1:4,9:21,1:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,1:1,9:12,1:13,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,2:1,0:1,1:14,0:34,1:2,0:34,1:2,3:4,0:4,4:1,0:21,3:4,1:2,0:13,2:1,0:6,2:1,0:13,1:2,0:12,2:3,0:4,2:3,0:12,1:2,3:4,0:7,2:5,0:2,2:5,0:11,1:2,0:9,4:1,0:24,1:2,0:13,2:1,0:6,2:1,0:13,1:2,3:4,0:21,4:1,0:4,3:4,1:2,0:13,2:1,0:6,2:1,4:1,0:12,1:2,0:34,1:2,3:4,0:19,4:1,0:10,1:2,0:10,4:1,0:11,4:2,0:10,1:2,0:11,4:1,0:22,1:2,3:4,0:8,4:1,0:17,3:4,1:2,0:34,1:2,0:34,1:2,3:4,0:30,1:2,0:34,1:2,0:3,4:2,0:11,4:1,0:17,1:2,0:15,4:1,0:1,4:1,0:5,4:3,0:8,1:2,0:2,4:2,0:2,3:1,0:5,3:1,0:1,4:1,0:3,3:1,0:5,3:1,4:1,0:4,3:1,0:3,1:2,0:6,3:1,0:5,3:1,0:5,3:1,0:5,3:1,0:5,3:1,0:3,1:2,0:6,3:1,0:5,3:1,0:5,3:1,0:5,3:1,0:5,3:1,0:3,1:2,0:6,3:1,0:5,3:1,0:5,3:1,0:5,3:1,0:5,3:1,0:3,1:37");
 
    var left = false;
    var right = false;
    var up = false;
    var down = false;
    var fire = false;

    var spinSpeed = 0;
    var mainSpeed = 0;
    var cameraX = -3450;
    var cameraY = -38450;
   // var cameraY = -26450;

    var cameraZDefault = 0.44;
  //  var cameraZDefault = 0.04;
    var cameraZ = cameraZDefault;

    velX = 0;
    velY = 0;
    var rot = 0;

    var degreesToRad = Math.PI/180;

    var len;

    var lastTime = Date.now();
    var currentTime;
    var fps = "";
    var frames = 0;
    var lastSecond = 1;
    var duration = 0;
    var tileLightTime = 0;

    var tilesLength = level[0].length;
    var tilesHeight = level.length;
    var TILESIZE = 12;
    var w1 = TILESIZE;
    var h1 = TILESIZE;
    var di = Math.sqrt(Math.pow(w1, 2) + Math.pow(h1, 2));

    var onMenu = true;

    var showFPS = false;

	function getDebug() {
		return debug;
	}

    function getUp() {
        return up;

    }

    function run() {

        for (var i = 0; i < things.length; i++) {
            var current = things[i];
            listOfThings.push(new hammer.Thing(current[0], current[1], current[2], current[3], current[4], current[5], false, false, false, current[6], 0, null));
        }

        //setup
        setup();


        showMenu();

    };

    function showMenu() {

        context.save();
        context.scale(.4, .4);
        context.translate(centerX * 2, centerY);
        /*
            for (var q = 0; q < temp[5].length; q++) {

                var c = temp[5][q];

                        context.fillStyle = H.colours[c[1]];
                        var p = c[2];
                        context.beginPath();
                        context.moveTo(p[0], p[1]);

                        for (var d = 0; d < p.length; d++) {
                            context.lineTo(-p[d][0], p[d][1]);
                        }

                        context.closePath();
                        context.fill();

                    }
                    */

            context.restore();
            context.font = "bold 42px sans-serif";
            context.fillStyle = 'yellow';
            context.fillText("HAMMERHEAD.", centerX - 500, centerY);
            context.font = "bold 22px sans-serif";
            context.fillText("W accelerates, A and D to rotates, mouse move will aim and left click will shoot.", centerX - 500, centerY + 100);
            context.fillText("Press any key to continue", centerX - 500, centerY + 150);
            onMenu = true;

    }

    function uncompress(cString) {
        var strSplit = cString.split("-");

        var size = strSplit[0];
        var str = strSplit[1];

        uncomp = str.split(",");

        outputList = [[]];

        var cSize = 0;
        for (var u = 0; u < uncomp.length; u++) {

            var uncompV = (uncomp[u].split(":"));

            for (var x = 0; x < uncompV[1]; x++) {

                outputList[outputList.length - 1].push(parseInt(uncompV[0]));
                cSize++;
                if (cSize >= size) {
                    outputList.push([]);
                    cSize = 0;
                }

            }

        }
        return outputList.splice(0, outputList.length - 1);
    };

    function createTiles() {

        var aw1 = 25;
        var ah1 = 25;
        var aw2 = 25;
        var ah2 = 250;
        var aw3 = 25;
        var ah3 = 290;

        var tile1 = new Image();
        var tile1a = new Image();
        var tile1b = new Image();
        var tile2 = new Image();
        var tile3 = new Image();
        var tile4 = new Image();

        c = document.createElement("canvas");
        c.width = w1;
        c.height = h1;
        ctx = c.getContext("2d");

        ctx.fillStyle = "rgb(36, 33, 33)";
        ctx.fillRect(0, 0, w1, h1);

        ctx.fillStyle = "rgb(36, 33, 13)";
        ctx.fillRect(1, 2, 1, 12);

        ctx.fillStyle = "rgb(36, 33, 13)";
        ctx.fillRect(1, 10, 1, 12);

        tile1.src = (c.toDataURL());

        ctx.fillStyle = "rgb(36, 33, 93)";
        ctx.fillRect(4, 4, 4, 4);

        tile1a.src = (c.toDataURL());

        ctx.fillStyle = "rgb(36, 33, 33)";
        ctx.fillRect(0, 0, TILESIZE, TILESIZE);

        ctx.fillStyle = "#ff0000";
        ctx.fillRect(4, 4, 4, 4);

        tile1b.src = (c.toDataURL());

        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, TILESIZE, TILESIZE);

        ctx.fillStyle = "rgb(80, 67, 67)";
        ctx.fillRect(0, 0, w1, h1);

        tile2.src = (c.toDataURL());

        ctx.fillStyle = "rgb(36, 33, 33)";
        ctx.fillRect(0, 0, w1, h1);

        ctx.fillStyle = "rgb(11, 11, 11)";
        ctx.fillRect(0, 5, 12, 2);

        ctx.fillStyle = "rgb(11, 11, 11)";
        ctx.fillRect(5, 0, 2, 12);

        tile3.src = (c.toDataURL());

        ctx.fillStyle = "black";
        ctx.fillRect(0, 0, TILESIZE, TILESIZE);

        ctx.fillStyle = "rgb(36, 33, 33)";
        ctx.fillRect(0, 0, w1, h1);

        ctx.fillStyle = "gray";
        ctx.fillRect(0, 0, 1, 1);
        ctx.fillStyle = "gray";
        ctx.fillRect(0, 0, 3, 3);

        tile4.src = (c.toDataURL());

        tileY = 0;
        tileY = tileY + di / 2;

        tile2.onload = function() {
            c = document.createElement("canvas");
            c.width = tilesLength * TILESIZE;
            c.height = tilesHeight * TILESIZE;
            ctx = c.getContext("2d");

            var tileX = 0;
            var tileY = 0;
            for (var a = 0; a < tilesHeight; a++) {

                for (var x = 0; x < tilesLength; x++) {

                    if (level[a][x] === 2) {

                        if (lightOn) {
                            ctx.drawImage(tile1a, (tileX), (tileY), TILESIZE, TILESIZE);
                        } else {
                            ctx.drawImage(tile1b, (tileX), (tileY), TILESIZE, TILESIZE);
                        }
                    } else if (level[a][x] === 4) {
                        ctx.drawImage(tile4, (tileX), (tileY), TILESIZE, TILESIZE);
                    } else if (level[a][x] === 3) {
                        ctx.drawImage(tile3, (tileX), (tileY), TILESIZE, TILESIZE);
                    } else if (level[a][x] === 1) {
                        ctx.drawImage(tile2, (tileX), (tileY), TILESIZE, TILESIZE);
                    } else if (level[a][x] === 0) {

                        ctx.drawImage(tile1, (tileX), (tileY), TILESIZE, TILESIZE);
                    }
                    tileX = tileX + TILESIZE;

                }

                tileX = 0;
                tileY = tileY + TILESIZE;
            }

            tilesAll.src = (c.toDataURL());

            lightOn = true;
            tileX = 0;
            tileY = 0;
            for (var a = 0; a < tilesHeight; a++) {

                for (var x = 0; x < tilesLength; x++) {

                    if (level[a][x] === 2) {

                        if (lightOn) {
                            ctx.drawImage(tile1a, (tileX), (tileY), TILESIZE, TILESIZE);
                        } else {
                            ctx.drawImage(tile1b, (tileX), (tileY), TILESIZE, TILESIZE);
                        }
                    } else if (level[a][x] === 4) {
                        ctx.drawImage(tile4, (tileX), (tileY), TILESIZE, TILESIZE);
                    } else if (level[a][x] === 3) {
                        ctx.drawImage(tile3, (tileX), (tileY), TILESIZE, TILESIZE);
                    } else if (level[a][x] === 1) {
                        ctx.drawImage(tile2, (tileX), (tileY), TILESIZE, TILESIZE);
                    } else if (level[a][x] === 0) {

                        ctx.drawImage(tile1, (tileX), (tileY), TILESIZE, TILESIZE);
                    }
                    tileX = tileX + TILESIZE;

                }

                tileX = 0;
                tileY = tileY + TILESIZE;
            }

            tilesAll2.src = (c.toDataURL());
            tilesAllReady = true;
        };


    };


    function setup() {
        canvas = document.getElementById("c");
        canvas.width = canvasWidth;
        canvas.height = canvasHeight;
        context = canvas.getContext("2d");

        createTiles();

        window.addEventListener('keydown', function(e) {
            var key = e.which;

            if (e.which === 65) {
                left = true;
                listOfThings[0].setRenderP(temp[1]);
            }

            if (e.which === 68) {
                right = true;
                listOfThings[0].setRenderP(temp[2]);
            }

            if (e.which === 87) {
                up = true;
            }

            if (e.which === 83) {
                down = true;
            }

            if (e.which === 74) {
                fire = true;
            }
			
            if (e.which === 79) {
                debug = !debug;
            }

        }, false);

        window.addEventListener('keyup', function(e) {


            if (e.which === 65 || e.which === 68 || e.which === 87 || e.which === 83 || e.which === 74) {
                if (onMenu) {
                    onMenu = false;
                    requestAnimFrame(mainLoop);
                }
            }

            var key = e.which;

            if (e.which === 65) {
                left = false;
                listOfThings[0].setRenderP(temp[0]);
            }

            if (e.which === 68) {
                right = false;
                listOfThings[0].setRenderP(temp[0]);
            }

            if (e.which === 87) {
                up = false;
            }

            if (e.which === 83) {
                down = false;
            }

            if (e.which === 74) {
                fire = false;
            }

        }, false);

        window.addEventListener('mousewheel', function(e) {

            var e = window.event || e; // old IE support
            var delta = Math.max(-1, Math.min(1, (e.wheelDelta || -e.detail)));

            if (delta === 1) {
               // if (cameraZ + 0.05 < 0.90) {
                    cameraZ += 0.05;
              //  }
            } else if (delta === -1) {
          //      if (cameraZ - 0.05 > 0.10) {
                    cameraZ -= 0.05;
            //    }
            }

        }, false);

        window.addEventListener('mousemove', function(e) {

            var diffX = e.clientX - centerX;
            var diffY = e.clientY - centerY;

            listOfThings[0].setGunAngle(Math.atan2(-diffY, -diffX) * (180 / Math.PI));

        }, false);

        window.addEventListener('mousedown', function(e) {

            if (e.which === 1) {
                fire = true;

                if (onMenu) {
                    onMenu = false;
                    requestAnimFrame(mainLoop);
                }
            }
            

        }, false);

        var touch;
        var touch2;
        window.addEventListener('touchstart', function(e) {

         //   console.log(e.touches.length);
           // if (e.touches.length === 1) {
                if (touch === null) {
                touch = e.touches[0];
                touchX = touch.pageX;
                touchY = touch.pageY;
        }
          //  }

            if (onMenu) {
                onMenu = false;
                requestAnimFrame(mainLoop);
            }

        }, false);

        window.addEventListener('touchmove', function(e) {

            e.preventDefault();

                var touchNew =  e.changedTouches[0];

                /*
                    var length = Math.sqrt( Math.pow(touchX - touch.pageX, 2) + Math.pow(touchY - touch.pageY, 2));

                        if (touchX > touch.pageX) {
                            left = true;
                            right = false;
                            listOfThings[0].setRenderP(temp[1]);
                        } else {
                            left = false;
                            right = true;
                            listOfThings[0].setRenderP(temp[2]);
                        }

                        if (touchY > touch.pageY) {
                            up = true;
                            mainSpeed += length * delta;
                        } else {
                            up = false;
                            mainSpeed = 0;

                        }


                        listOfThings[0].setRenderP(temp[0]);
                        left = false;
                        right = false;
                        up = false;
                        spinSpeed = 0;
                        mainspeed = 0;
                        */

                var diffX = (touchNew.pageX - touchX) * -1;
                var diffY = (touchNew.pageY - touchY) * -1;

                if (touchNew.pageX > touchX) {

                    if ((touchNew.pageX - touchX) > 100) {
                        left = false;
                        right = true;
                        listOfThings[0].setRenderP(temp[1]);
                    } else {
                        left = false;
                        right = false;
                        listOfThings[0].setRenderP(temp[0]);
                    }
                } else {

                    if ((touchX - touchNew.pageX) > 100) {
                        left = true;
                        right = false;
                        listOfThings[0].setRenderP(temp[2]);
                    } else {
                        left = false;
                        right = false;
                        listOfThings[0].setRenderP(temp[0]);
                    }
                }

                if (touchNew.pageY < touchY) {
                    if (diffY > 100) {
                    up = true;
                    }                 
                } else {
                    up = false;
                }

        }, false);

        window.addEventListener('touchend', function(e) {

            cOut = e.targetTouches.length;

            touch = null;
            left = false;

            up = false;
            right = false;

            listOfThings[0].setRenderP(temp[0]);
            spinSpeed = 0;
            mainspeed = 0;
            cOut = "";

        }, false);
    }

    var t = 0;
    // Main Loop
    function mainLoop() {

        if (running) {
            requestAnimFrame(mainLoop);

            var now = Date.now();
            delta = (now - lastTime) / 1000; 
            lastTime = now;

            frames++;
            duration += delta;

            tileLightTime += delta;
            aTime += delta;

            if (duration > 1) {
                fps = frames;
                duration = 0;
                frames = 0;
            }

            if (tileLightTime > 2) {
                lightOn = !lightOn;
                tileLightTime = 0;
            }

            if (!showEndMessage) {
                update(delta);

                if (tilesAllReady) {
                    render(delta);
                }
            } else {

                endMessageTime += 1 * delta;

                if (endMessageTime < 6) {

                    clearScreen();
                    context.font = "bold 24px sans-serif";
                    context.fillStyle = "red";
                    context.fillText(endMessage, centerX - 110, centerY);
                    context.fillText("HAMMERHEAD will restart in " + (6 - parseInt(endMessageTime, 10)) + " seconds", centerX - 270, centerY + 150);
                } else {

                    reset();
                    showEndMessage = false;
                    endMessageTime = 0;

                }
            }
        }
    }

    // Update loop
    function update(delta) {

        if (left) {
            if (spinSpeed > -200) {
                spinSpeed -= (100);
            }
        } else {
            if (spinSpeed < 0) {
                spinSpeed += (50);
            }
        }

        if (right) {
            if (spinSpeed < 200) {
                spinSpeed += (100);
            }
        } else {
            if (spinSpeed > 0) {
                spinSpeed -= (50);
            }
        }

        listOfThings[0].addRotation((spinSpeed * delta));
		
		// FIX: bounding box rotation
        /*
        for (var c = 0; c < listOfThings.length; c++) {

            if (listOfThings[c].getID() !== "event") {
                if (checkCollision(listOfThings[0], listOfThings[c])) {
			        listOfThings[0].removeRotation((spinSpeed * delta));
                }
            }
        }
		
		////
        //*/
		
        if (up) {
            if (mainSpeed < 1700) {

                mainSpeed += (80);

                }

                    if (cameraZ > 0.15) {
                        cameraZ -= (0.10 * delta);
                    }

            if (spinSpeed > 0) {
                spinSpeed -= (50);
            } else if (spinSpeed < 0) {
                spinSpeed += (50);
            }
        } else {
            if (mainSpeed > 0) {
                mainSpeed -= (10);
            } else if (mainSpeed < 0) {
                mainSpeed += (10);
            }

            if ((Math.round(cameraZ * 10 ) / 10) !== cameraZDefault) {
                if (((cameraZ - cameraZDefault)* -1) > 0.002) {
                if (cameraZ > cameraZDefault) {
                    cameraZ -= (0.05 * delta);
                } else if (cameraZ < cameraZDefault) {
                    cameraZ += (0.05 * delta);
                }
                }
            }
        }
        
        velX = (-mainSpeed * delta * Math.cos(listOfThings[0].getRotation() * (Math.PI/180)));
        velY = (-mainSpeed * delta * Math.sin(listOfThings[0].getRotation() * (Math.PI/180)));

        listOfThings[0].addX(velX);
        cameraX -= velX;
		
        for (var c = 0; c < listOfThings.length; c++) {

            if (listOfThings[c].getTag() !== "event") {
                if (checkCollision(listOfThings[0], listOfThings[c])) {
			        listOfThings[0].removeX(velX);

			        cameraX += velX;
                }
            }
        }



        listOfThings[0].addY(velY);
        cameraY -= velY;

        for (var c = 0; c < listOfThings.length; c++) {

            if (listOfThings[c].getTag() !== "event") {
                if (checkCollision(listOfThings[0], listOfThings[c])) {
			        listOfThings[0].removeY(velY);

			        cameraY += velY;
                }
            }
        }

        playerFireTime += (1 * delta);
        if (playerFireTime > 0.5) {
            if (fire) {
                createBullet(listOfThings[0].getPosition(), listOfThings[0].getGunRotation());
                fire = false;
                playerFireTime = 0;
            }
        }

        doThingUpdate(delta);
        doCollision();
    }

    function createBullet(pos, rot) {
        var p = [[1, 1, [[-20,-7.6378178], [-20,12.362183], [50,2.3621822], ]]];

		var rotate = listOfThings[0].getGunRotation();
        var tX = (-8000 * Math.cos(rotate * (Math.PI/180)));
        var tY = (-8000 * Math.sin(rotate * (Math.PI/180)));

        listOfThings.push(new hammer.Thing("Bullet", "bullet", [pos[0], pos[1]], rot, p, [100, 100], false, false, 5, true, 1.0, [tX + listOfThings[0].getX(), tY + listOfThings[0].getY()]));
    }

    function doThingUpdate(delta) {
        for (var i = 0; i < listOfThings.length; i++) {
            if (listOfThings[i].isAlive()) {
				listOfThings[i].update(delta)
            } else {
                if (listOfThings[i].getTag() === "bullet" || listOfThings[i].getTag() === "bullet2") {
                listOfThings.splice(i, 1);
                }
            }
        }
    }


    function doCollision() {
        for (var c = 0; c < listOfThings.length; c++) {
            for (var c2 = 0; c2 < listOfThings.length; c2++) {
                if (checkCollision(listOfThings[c], listOfThings[c2])) {
                    listOfThings[c].collide(listOfThings[c2]);
                    listOfThings[c2].collide(listOfThings[c]);
                } else {
                    listOfThings[c].uncollide(listOfThings[c2]);
                    listOfThings[c2].uncollide(listOfThings[c]);

                }
            }
        }
    }

    function checkCollision(thing1, thing2) {

        if (thing1.getID() === thing2.getID()) {
            return false;
        }

        var thing1Left = thing1.getX();
        var thing2Left = thing2.getX();

        var thing1Right = thing1.getX() + thing1.getWidth();
        var thing2Right = thing2.getX() + thing2.getWidth();

        var thing1Top = thing1.getY();
        var thing2Top = thing2.getY();

        var thing1Bottom = thing1.getY() + thing1.getHeight();
        var thing2Bottom = thing2.getY() + thing2.getHeight();

        if (thing1Bottom < thing2Top) {
            return false;
        }
        if (thing1Top > thing2Bottom) {
            return false;
        }

        if (thing1Right < thing2Left) {
            return false;
        }
        if (thing1Left > thing2Right) {
            return false;
        }

        return true;

    }

    function getDistance(aX, aY, bX, bY) {
        return Math.sqrt( Math.pow((aX - bX) , 2) + Math.pow((aY - bY) , 2));
    }


    // Render loop
    function render(delta) {
        clearScreen();

        // context save //
        context.save();

            context.translate(canvasWidth / 2, canvasHeight / 2);
            //context.rotate(degreesToRad * -(listOfThings[0].getRotation() - 90));
            //

 //         context.scale((Math.round(cameraZ * 10 ) / 10), (Math.round(cameraZ * 10 ) / 10));

            context.scale(cameraZ, cameraZ);

            drawTiles(context);

            drawThings(context);

        // context restore //
        context.restore();

        if (showFPS) {
            context.font = "bold 12px sans-serif";
            context.fillStyle = 'yellow';
            context.fillText("FPS: " + fps, canvasWidth - 300, canvasHeight - 300);
        }

        context.font = "bold 24px sans-serif";
        context.fillStyle = "red";
        context.fillText(H.eL + "/13 enemies Left", centerX - 110, 40);

     //   context.font = "bold 12px sans-serif";
   //     context.fillStyle = 'yellow';
 //       context.fillText("Touch: " + cOut, canvasWidth - 300, canvasHeight - 500);
 //

    }

    function clearScreen() {
        context.fillStyle = "black";
        context.fillRect(0, 0, canvasWidth, canvasHeight);
    }

    function drawTiles(cont) {
        if (lightOn) {
            cont.drawImage(tilesAll, 0, 0, tilesLength * TILESIZE, tilesHeight * TILESIZE, (cameraX), (cameraY), tilesLength * TILESIZE * 25, tilesHeight * TILESIZE * 25);
        } else {
            cont.drawImage(tilesAll2, 0, 0, tilesLength * TILESIZE, tilesHeight * TILESIZE, (cameraX), (cameraY), tilesLength * TILESIZE * 25, tilesHeight * TILESIZE * 25);

        }

    }

    function drawThings(cont) {
        //////////
        // Things
        //////////
        len = listOfThings.length;
        for (var i = 0; i < len; i++) {
            var current = listOfThings[i];
            current.render(cont, cameraX, cameraY, cameraZ);
        }

    }

    function reset() {
        cameraX = -3450;
        cameraY = -38450;
        cameraZ = 0.44;
        H.eL = 13;

        listOfThings[0].reset([3450, 38450], 0);
        listOfThings[1].reset([8050, 38290], 0);
        listOfThings[2].reset([8450, 34290], 0);
        listOfThings[3].reset([4550, 34090], 0);
        listOfThings[4].reset([4550, 37090], 0);
        listOfThings[5].reset([4550, 28090], 0);
        listOfThings[6].reset([6950, 25090], 0);
        listOfThings[7].reset([2950, 23090], 0);
        listOfThings[8].reset([3950, 17090], 0);
        listOfThings[9].reset([6950, 19090], 0);
        listOfThings[10].reset([1500, 2000], 235);
        listOfThings[11].reset([7900, 1300], 225);
        listOfThings[12].reset([7900, 5000], 265);
        listOfThings[13].reset([1900, 6000], 225);

        mainSpeed = 0;
        spinSpeed = 0;

        left = false;
        right = false;
        up = false;
        down = false;
        fire = false;

    }

    function restart(str) {
        endMessage = str;
        showEndMessage = true;
    }

    hammer.gD = getDebug;
    hammer.r = run;
    hammer.listOfThings = listOfThings;
    hammer.cC = checkCollision;
    hammer.gDi = getDistance;
    hammer.c = colours;
    hammer.getUp = getUp;
    hammer.eL = enemiesLeft;
    hammer.f = restart;;

    return hammer;
}(H || {}));
